// tsconfig.json (nella root del progetto)
{
  "compilerOptions": {
    "target": "ESNext", // Target moderno per il browser
    "useDefineForClassFields": true, // Consigliato con Vite/React
    "lib": ["DOM", "DOM.Iterable", "ESNext"], // Librerie per browser e funzionalità JS moderne
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true, // Manteniamo la modalità strict per una maggiore robustezza
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext", // Moduli ES per il browser (Vite li gestirà)
    "moduleResolution": "bundler", // Strategia di risoluzione moduli ottimizzata per bundler (Vite)
    "resolveJsonModule": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "allowJs": true, // Permette l'inclusione di file .js nel frontend (es. sw.js se non è .ts)
    "jsx": "react-jsx", // Supporto per JSX
    "paths": { "@/*": ["./*"] },
    "noEmit": true, // <--- CRUCIALE: Dice a TypeScript di non generare file JS per il frontend
    // Rimosso "outDir" perché "noEmit" è true
    // Rimosso "types": ["node"] per permettere a TypeScript di includere @types/react, @types/react-dom, ecc.
    "types": ["vite/client"] // Importante per i tipi specifici di Vite
  },
  "include": [
    "index.tsx",
    "api.ts", // api.ts è usato anche dal frontend
    "vite.config.ts",
    "sw.js", // Se è JavaScript, `allowJs` lo include; se fosse `sw.ts` lo includeresti qui.
    "public/**/*.d.ts" // Per qualsiasi file di definizione di tipo nel folder public
  ],
  "exclude": [
    "node_modules",
    "dist",
    "iisnode",
    "server.ts", // <--- Escludi esplicitamente il file del server da questa configurazione
    "tsconfig.server.json", // Escludi l'altra configurazione di TypeScript
    "tsconfig.ts-node.json", // Escludi l'altra configurazione di TypeScript
    "*.js" // Esclude file JS nella root che non sono gestiti da TypeScript come sorgenti
  ]
}